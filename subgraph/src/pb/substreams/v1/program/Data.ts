// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { InitializeCandidate } from "./InitializeCandidate";
import { InitializePoll } from "./InitializePoll";
import { Vote } from "./Vote";

export class Data {
  static encode(message: Data, writer: Writer): void {
    const initializeCandidateList = message.initializeCandidateList;
    for (let i: i32 = 0; i < initializeCandidateList.length; ++i) {
      writer.uint32(10);
      writer.fork();
      InitializeCandidate.encode(initializeCandidateList[i], writer);
      writer.ldelim();
    }

    const initializePollList = message.initializePollList;
    for (let i: i32 = 0; i < initializePollList.length; ++i) {
      writer.uint32(18);
      writer.fork();
      InitializePoll.encode(initializePollList[i], writer);
      writer.ldelim();
    }

    const voteList = message.voteList;
    for (let i: i32 = 0; i < voteList.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Vote.encode(voteList[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Data {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Data();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.initializeCandidateList.push(
            InitializeCandidate.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.initializePollList.push(
            InitializePoll.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.voteList.push(Vote.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  initializeCandidateList: Array<InitializeCandidate>;
  initializePollList: Array<InitializePoll>;
  voteList: Array<Vote>;

  constructor(
    initializeCandidateList: Array<InitializeCandidate> = [],
    initializePollList: Array<InitializePoll> = [],
    voteList: Array<Vote> = []
  ) {
    this.initializeCandidateList = initializeCandidateList;
    this.initializePollList = initializePollList;
    this.voteList = voteList;
  }
}
